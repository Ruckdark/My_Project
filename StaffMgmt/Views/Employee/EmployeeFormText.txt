@* File: Views/Employee/EmployeeForm.cshtml *@
@model StaffMgmt.Models.EmployeeFormViewModel
@{
    ViewData["Title"] = "Quản lý Nhân viên"; bool isEditMode = Model?.Id > 0;
}

@section Styles {
    <link rel="stylesheet" href="~/css/style.css" asp-append-version="true" />
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" />
    <style>
        /* ... CSS styles giữ nguyên ... */
        .form-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 1rem 1.5rem;
            margin-bottom: 1.5rem;
        }

        .address-group-label {
            grid-column: 1 / -1;
            margin-top: 1rem;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }

        .address-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            grid-column: 1 / -1;
            margin-bottom: 1rem;
            padding-left: 15px;
        }

        .form-group > label:not(.form-check-label):not(.address-group-label) {
            margin-bottom: 0.25rem;
            font-size: 0.9rem;
        }

        .employee-form .btn {
            border-radius: 2px;
            padding: 5px 12px;
            font-size: 0.9rem;
        }

        .employee-form .submit-button {
            background-color: #e0e0e0;
            border-color: #bdbdbd;
            color: #333;
            font-weight: bold;
        }

            .employee-form .submit-button:hover {
                background-color: #d5d5d5;
                border-color: #adadad;
            }

        .employee-form .cancel-button {
            background-color: #eee;
            border-color: #ccc;
            color: #333;
        }

            .employee-form .cancel-button:hover {
                background-color: #ddd;
                border-color: #bbb;
            }

        .employee-form .back-button {
            border: none;
            background: none;
            color: #0d6efd;
            padding-left: 0;
        }

            .employee-form .back-button:hover {
                text-decoration: underline;
            }

        .form-group .form-check {
            margin-top: 0.25rem;
        }

        .hidden-field {
            display: none;
        }

        .field-validation-error {
            color: #dc3545;
            font-size: 0.875em;
            display: block;
        }

        .input-validation-error {
            border-color: #dc3545 !important;
        }

        select.input-validation-error {
            border-color: #dc3545 !important;
        }

            select.input-validation-error + .select2-container--bootstrap-5 .select2-selection {
                border-color: #dc3545 !important;
            }

        .validation-summary-errors ul {
            list-style: none;
            padding-left: 0;
            margin-bottom: 0;
        }

        .validation-summary-errors li {
            color: #dc3545;
        }

        .select2-container--bootstrap-5 .select2-selection {
            font-size: 0.875rem;
            min-height: calc(1.5em + 0.5rem + 2px);
            padding: 0.25rem 0.5rem;
            border-radius: 2px;
            border: 1px solid #dee2e6;
        }

        .select2-container--bootstrap-5 .select2-selection--single .select2-selection__rendered {
            padding-left: 0;
            line-height: 1.5;
        }

        .select2-container--bootstrap-5 .select2-selection--single .select2-selection__arrow {
            height: calc(1.5em + 0.5rem);
            top: 0px;
        }
    </style>
}

<div class="container emp-form-container border p-3 bg-white shadow-sm">
    @* Phần Tabs *@
    <div class="tabs mb-3">
        <button class="tab-button active" data-tab-target="#employeeInfoTab">Quản lý Employee</button>
        <a asp-controller="Provinces" asp-action="Index" class="tab-button">Danh mục Tỉnh</a>
        <a asp-controller="Districts" asp-action="Index" class="tab-button">Danh mục Huyện</a>
        <a asp-controller="Wards" asp-action="Index" class="tab-button">Danh mục Xã</a>
    </div>

    <form class="employee-form" asp-action="@(isEditMode ? "Edit" : "Create")" asp-controller="Employee" method="post">
        @Html.AntiForgeryToken()
        <div asp-validation-summary="All" class="alert alert-danger validation-summary-errors mb-3" role="alert" style="@(ViewData.ModelState.IsValid ? "display:none;" : "")"></div>
        @if (isEditMode)
        {
            <input type="hidden" asp-for="Id" />
        }

        <div id="employeeInfoTab" class="tab-content active border p-3">
            <div class="form-grid">
                @* --- Các form-group với Tag Helpers --- *@
                <div class="form-group"> <label asp-for="FullName"></label> <input asp-for="FullName" class="form-control form-control-sm" /> <span asp-validation-for="FullName" class="field-validation-error"></span> </div>
                <div class="form-group date-group"> <label asp-for="DateOfBirth"></label> <div class="input-group input-group-sm"> <input asp-for="DateOfBirth" type="date" class="form-control form-control-sm" id="dateOfBirthInput" /> </div> <span asp-validation-for="DateOfBirth" class="field-validation-error"></span> </div>
                <div class="form-group hidden-field"> <label for="ageInput">3. Tuổi</label> <input type="number" id="ageInput" class="form-control form-control-sm" readonly> </div>
                <div class="form-group"> <label asp-for="EthnicityId"></label> <select asp-for="EthnicityId" asp-items="@Model.EthnicityList" class="form-select form-select-sm select2-basic"> <option value="">Chọn dân tộc</option> </select> <span asp-validation-for="EthnicityId" class="field-validation-error"></span> </div>
                <div class="form-group"> <label asp-for="OccupationId"></label> <select asp-for="OccupationId" asp-items="@Model.OccupationList" class="form-select form-select-sm select2-basic"> <option value="">Chọn nghề nghiệp</option> </select> <span asp-validation-for="OccupationId" class="field-validation-error"></span> </div>
                <div class="form-group"> <label asp-for="IdentityCardNumber"></label> <input asp-for="IdentityCardNumber" class="form-control form-control-sm" id="cccdInput" /> <div class="form-check mt-1"> <input asp-for="HasNoIdentityCard" class="form-check-input" id="khongCCCDCheckbox" /> <label class="form-check-label" asp-for="HasNoIdentityCard"></label> </div> <span asp-validation-for="IdentityCardNumber" class="field-validation-error"></span> </div>
                <div class="form-group"> <label asp-for="PhoneNumber"></label> <input asp-for="PhoneNumber" type="tel" class="form-control form-control-sm" id="sdtInput" /> <div class="form-check mt-1"> <input asp-for="HasNoPhoneNumber" class="form-check-input" id="khongSDTCheckbox" /> <label class="form-check-label" asp-for="HasNoPhoneNumber"></label> </div> <span asp-validation-for="PhoneNumber" class="field-validation-error"></span> </div>
                <div class="form-group"></div>
                <label class="address-group-label">8. Địa chỉ</label>
                <div class="address-grid">
                    <div class="form-group"> <label asp-for="ProvinceId"></label> <select asp-for="ProvinceId" asp-items="@Model.ProvinceList" class="form-select form-select-sm" id="provinceSelect"> <option value="">Chọn Tỉnh / Thành phố</option> </select> <span asp-validation-for="ProvinceId" class="field-validation-error"></span> </div>
                    <div class="form-group"> <label asp-for="DistrictId"></label> <select asp-for="DistrictId" asp-items="@Model.DistrictList" class="form-select form-select-sm" id="districtSelect" disabled> <option value="">Chọn Quận / Huyện</option> </select> <span asp-validation-for="DistrictId" class="field-validation-error"></span> </div>
                    <div class="form-group"> <label asp-for="WardId"></label> <select asp-for="WardId" asp-items="@Model.WardList" class="form-select form-select-sm" id="wardSelect" disabled> <option value="">Chọn Xã / Phường</option> </select> <span asp-validation-for="WardId" class="field-validation-error"></span> </div>
                    <div class="form-group"> <label asp-for="StreetAddress"></label> <input asp-for="StreetAddress" class="form-control form-control-sm" placeholder="Số nhà, tên đường..."> <span asp-validation-for="StreetAddress" class="field-validation-error"></span> </div>
                </div>
            </div>
            <div class="form-footer mt-4 pt-3 border-top d-flex justify-content-between align-items-center">
                <a asp-action="Index" asp-controller="Employee" class="btn btn-link back-button p-0"> &lt; Danh sách Employee </a>
                <div class="action-buttons"> <button type="reset" class="btn btn-outline-secondary cancel-button">Hủy</button> <button type="submit" class="btn btn-primary submit-button"> @(isEditMode ? "Cập nhật" : "Xác nhận") </button> </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
        $(document).ready(function () {
            const $employeeForm = $('.employee-form');

            // --- Khởi tạo Select2 ---
            // Hàm khởi tạo chung
            function initializeSelect2($element, placeholderText) {
                $element.select2({
                    theme: "bootstrap-5",
                    width: 'style',
                    placeholder: placeholderText,
                    allowClear: true
                }).on('select2:select select2:unselect', function (e) { // <<=== Sửa: Lắng nghe sự kiện select/unselect của Select2
                    // Trigger validation khi người dùng chọn hoặc bỏ chọn (không dùng clear nữa)
                    var $select = $(this);
                    // Dùng setTimeout để đảm bảo giá trị select gốc đã cập nhật
                    setTimeout(function () {
                        $select.valid(); // Gọi .valid() của jQuery Validation
                        // Logic riêng cho cascading dropdowns khi Tỉnh/Huyện thay đổi
                        if ($select.is('#provinceSelect')) {
                            $('#districtSelect').valid();
                            $('#wardSelect').valid();
                        } else if ($select.is('#districtSelect')) {
                            $('#wardSelect').valid();
                        }
                    }, 0);
                });
            }

            // Khởi tạo cho các select cụ thể
            initializeSelect2($('.select2-basic[asp-for="EthnicityId"]'), "Chọn dân tộc");
            initializeSelect2($('.select2-basic[asp-for="OccupationId"]'), "Chọn nghề nghiệp");
            const $provinceSelect = $('#provinceSelect'); initializeSelect2($provinceSelect, "Chọn Tỉnh / Thành phố");
            const $districtSelect = $('#districtSelect'); initializeSelect2($districtSelect, "Chọn Quận / Huyện");
            const $wardSelect = $('#wardSelect'); initializeSelect2($wardSelect, "Chọn Xã / Phường");
            // -------------------------


            // --- Xử lý checkbox disable input (JS thuần) ---
            // ... (code giữ nguyên) ...
            const cccdInput = document.getElementById('cccdInput'); const khongCCCDCheckbox = document.getElementById('khongCCCDCheckbox'); const sdtInput = document.getElementById('sdtInput'); const khongSDTCheckbox = document.getElementById('khongSDTCheckbox'); function toggleInputDisabled(c, i) { if (i) { i.disabled = c.checked; if (c.checked) i.value = ''; } } if (khongCCCDCheckbox) { khongCCCDCheckbox.addEventListener('change', function () { toggleInputDisabled(this, cccdInput); }); toggleInputDisabled(khongCCCDCheckbox, cccdInput); } if (khongSDTCheckbox) { khongSDTCheckbox.addEventListener('change', function () { toggleInputDisabled(this, sdtInput); }); toggleInputDisabled(khongSDTCheckbox, sdtInput); }


            // --- Tính tuổi tự động (JS thuần) ---
            // ... (code giữ nguyên) ...
            const dobInput = document.getElementById('dateOfBirthInput'); const ageInput = document.getElementById('ageInput'); function calculateAge() { if (dobInput && ageInput && dobInput.value) { try { let b; if (dobInput.value.includes('/')) { const p = dobInput.value.split('/'); if (p.length === 3) { b = new Date(p[2], p[1] - 1, p[0]); } } else { b = new Date(dobInput.value); } if (b && !isNaN(b.getTime())) { const t = new Date(); let a = t.getFullYear() - b.getFullYear(); const m = t.getMonth() - b.getMonth(); if (m < 0 || (m === 0 && t.getDate() < b.getDate())) { a--; } ageInput.value = a >= 0 ? a : ''; } else { ageInput.value = ''; } } catch (e) { console.error("Lỗi tính tuổi:", e); ageInput.value = ''; } } else if (ageInput) { ageInput.value = ''; } } if (dobInput) { dobInput.addEventListener('change', calculateAge); dobInput.addEventListener('blur', calculateAge); calculateAge(); }


            // --- Cascading Dropdown (jQuery & Select2) ---

            // Hàm reset dropdown Select2 và xóa lỗi validation
            function resetSelect2Dropdown($select, placeholderText) {
                const originalValue = $select.val();
                // Reset giá trị và trigger change.select2 để cập nhật UI
                $select.empty().append(`<option value="">${placeholderText}</option>`).val(null).trigger('change.select2');
                $select.prop('disabled', true);
                // Xóa lỗi validation nếu giá trị cũ khác null
                if (originalValue) {
                    var validator = $employeeForm.validate();
                    if (validator && validator.settings.rules && validator.settings.rules[$select.attr('name')]) {
                        var errors = {}; errors[$select.attr('name')] = ''; validator.showErrors(errors);
                        $select.removeClass('input-validation-error');
                        $select.siblings('.select2-container').find('.select2-selection').removeClass('input-validation-error');
                    }
                }
            }

            // Hàm populate dropdown Select2
            function populateSelect2Dropdown($select, data, placeholderText, selectedValue = null) {
                $select.prop('disabled', true);
                $select.empty();
                $select.append(`<option value="">${placeholderText}</option>`);
                if (data && data.length > 0) {
                    data.forEach(item => {
                        const option = new Option(item.name, item.id, false, (selectedValue && item.id == selectedValue));
                        $select.append(option);
                    });
                    if (selectedValue) { $select.val(selectedValue); }
                    $select.prop('disabled', false);
                } else { $select.append('<option value="">Không có dữ liệu</option>'); }
                // Trigger change.select2 để Select2 cập nhật UI
                $select.trigger('change.select2');
                // Không trigger .valid() ở đây, để handler sự kiện select2:select/unselect xử lý
            }

            // --- Bỏ các event handler 'change' riêng cho Tỉnh/Huyện ---

            // Sự kiện khi Tỉnh thay đổi (chỉ xử lý cascading)
            $provinceSelect.on('change', function () { // Lắng nghe sự kiện change chuẩn
                const provinceId = $(this).val();
                resetSelect2Dropdown($districtSelect, 'Chọn Quận / Huyện');
                resetSelect2Dropdown($wardSelect, 'Chọn Quận / Huyện trước');
                // Validation sẽ được trigger bởi handler chung đã gắn ở trên

                if (!provinceId) return;

                $districtSelect.empty().append('<option value="">Đang tải...</option>').prop('disabled', true).trigger('change.select2');
                $.ajax({
                    url: `/api/address/districts/${provinceId}`, type: 'GET', success: function (data) {
                        populateSelect2Dropdown($districtSelect, data, 'Chọn Quận / Huyện');
                        // Validation sẽ được trigger bởi handler chung khi giá trị $districtSelect thay đổi
                    }, error: function () { resetSelect2Dropdown($districtSelect, 'Lỗi tải dữ liệu'); }
                });
            });

            // Sự kiện khi Huyện thay đổi (chỉ xử lý cascading)
            $districtSelect.on('change', function () { // Lắng nghe sự kiện change chuẩn
                const districtId = $(this).val();
                resetSelect2Dropdown($wardSelect, 'Chọn Xã / Phường');
                // Validation sẽ được trigger bởi handler chung

                if (!districtId) return;

                $wardSelect.empty().append('<option value="">Đang tải...</option>').prop('disabled', true).trigger('change.select2');
                $.ajax({
                    url: `/api/address/wards/${districtId}`, type: 'GET', success: function (data) {
                        populateSelect2Dropdown($wardSelect, data, 'Chọn Xã / Phường');
                        // Validation sẽ được trigger bởi handler chung
                    }, error: function () { resetSelect2Dropdown($wardSelect, 'Lỗi tải dữ liệu'); }
                });
            });

            // Xử lý khi load trang Edit
            if ($districtSelect.find('option').length > 1 && $districtSelect.val()) { $districtSelect.prop('disabled', false); }
            if ($wardSelect.find('option').length > 1 && $wardSelect.val()) { $wardSelect.prop('disabled', false); }
            // Trigger change.select2 để cập nhật UI Select2 ban đầu
            $districtSelect.trigger('change.select2');
            $wardSelect.trigger('change.select2');
            // Không trigger validation ban đầu

        });
    </script>

    @* Tham chiếu Partial View chứa script jQuery Validation *@
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
